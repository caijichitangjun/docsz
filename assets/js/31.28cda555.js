(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{632:function(t,s,a){"use strict";a.r(s);var e=a(5),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"es7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es7"}},[t._v("#")]),t._v(" ES7")]),t._v(" "),a("p",[t._v("       ES7新增内容不多，如下：")]),t._v(" "),a("ul",[a("li",[t._v("** : 幂运算符")]),t._v(" "),a("li",[t._v("includes(value) : 判断数组中是否含有某个元素")])]),t._v(" "),a("h2",{attrs:{id:"es8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es8"}},[t._v("#")]),t._v(" ES8")]),t._v(" "),a("h3",{attrs:{id:"async和await-超重要"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async和await-超重要"}},[t._v("#")]),t._v(" async和await(超重要)")]),t._v(" "),a("p",[t._v("       async和await配合使用能让异步函数向同步代码一样。")]),t._v(" "),a("ol",[a("li",[t._v("aysnc：\nasync函数的返回值是promise对象，返回的promise对象的结果由async的返回值决定")]),t._v(" "),a("li",[t._v("await：\n必须写在async函数中\nawait右侧的表达式为promis对象，\nawait返回值是promise成功的值，\nawait的promise失败了会抛出异常，需要用try..catch接收")])]),t._v(" "),a("div",{staticClass:"language-javaScript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("eg")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getname")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回的是：字符串或其他，则为成功resolved")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           抛出异常，则为失败rejected")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回的就是promise对象，则由promise对象的状态决定　　 ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'成功'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// reject('失败')")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("testAwait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a ==> 成功 ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"对象方法扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象方法扩展"}},[t._v("#")]),t._v(" 对象方法扩展")]),t._v(" "),a("ul",[a("li",[t._v("values：获取对象所有的值")]),t._v(" "),a("li",[t._v("keys：获取对象所有的键")]),t._v(" "),a("li",[t._v("entries：将对象的每一对键值转化为数组，方便map对象的创建")]),t._v(" "),a("li",[t._v("getOwnPropertyDescriptors：获取对象的描述对象。即是否可修改、可删除等")])]),t._v(" "),a("h2",{attrs:{id:"es9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es9"}},[t._v("#")]),t._v(" ES9")]),t._v(" "),a("h3",{attrs:{id:"扩展运算符与rest参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展运算符与rest参数"}},[t._v("#")]),t._v(" 扩展运算符与rest参数")]),t._v(" "),a("p",[t._v("       这部分在ES6中其实引入过了，不过当时仅针对数组，在ES9中为对象也提供相应的支持。")]),t._v(" "),a("div",{staticClass:"language-javaScript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("eg")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("testRest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的...后面可以接任意命名，不是固定的。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// user会将剩余的参数收集起来。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数体内容省略")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" student "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("weight")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("56")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("b")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// c ==> { a: 1, b: 1}")]),t._v("\n")])])]),a("h3",{attrs:{id:"正则扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则扩展"}},[t._v("#")]),t._v(" 正则扩展")]),t._v(" "),a("p",[t._v("       第一个扩展是命名匹配分组，对分组匹配的结果命名"),a("code",[t._v("?<value>")]),t._v("，方便使用，如下：")]),t._v(" "),a("div",{staticClass:"language-javaScript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("eg")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'AbcweyuuAbcewuehAbc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("Abc(?<value1>.*)Abc(?<value2>.*)Abc")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正则以/开始和结束")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// *意为匹配0次或多次")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// . 为元字符，意为匹配任意单个字符")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value1  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// weyuu")]),t._v("\n  result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value2  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ewueh")]),t._v("\n")])])]),a("p",[t._v("       第二个扩展是反向断言"),a("code",[t._v("?<=value")]),t._v("，如下：")]),t._v(" "),a("div",{staticClass:"language-javaScript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("eg")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Abcweyuu123Abc456ewuehAbc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+(?=A)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \\d+意为匹配数字一次或多次 ， (?=A)：数字后面是不是A，不是则不要（正向断言）")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?<=u)\\d+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (?<=u)：数字前面是不是u，不是则不要（反向断言）")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reg     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 123 ,这里456并没有匹配上")]),t._v("\n")])])]),a("p",[t._v("       第三个扩展是dotAll，在第一个示例中我们已经用过了，其作用为"),a("code",[t._v(".")]),t._v("可以匹配任意的单个字符。")]),t._v(" "),a("h2",{attrs:{id:"es10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es10"}},[t._v("#")]),t._v(" ES10")]),t._v(" "),a("ul",[a("li",[t._v("trimStart：清除字符串左侧空白")]),t._v(" "),a("li",[t._v("trimEnd：清除字符串右侧空白")]),t._v(" "),a("li",[t._v("flat：将高维数组转化为低维数组")]),t._v(" "),a("li",[t._v("flatMap：将map转化为一个一维数组")]),t._v(" "),a("li",[t._v("fromEntries：将二维数组或map转化为对象形式，和ES8中的entries效果相反")]),t._v(" "),a("li",[t._v("description：获取创建symbol对象时传入的参数")])]),t._v(" "),a("h2",{attrs:{id:"es11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es11"}},[t._v("#")]),t._v(" ES11")]),t._v(" "),a("div",{staticClass:"language-javaScript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" peoper "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("firstName")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'z'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",[a("li",[t._v("class扩展\n私有属性 ==> "),a("code",[t._v("#age")])]),t._v(" "),a("li",[t._v("promise扩展\nallSettled：返回的结果总是成功的，成功的值是每一个promise对象的执行结果的值的集合，作用是保证每一个promise都能执行完毕。\nall：返回的结果待定，必须所有的promise执行结果全成功才会返回成功，否则返回失败")]),t._v(" "),a("li",[t._v("正则扩展\nmatchAll：获取所有匹配的结果相当于re.findall")]),t._v(" "),a("li",[t._v("可选链操作符（?.）\n当对象的层级比较深时，需要对每一层都要验证来确保他存在。\npeoper?.name?.firstName")]),t._v(" "),a("li",[t._v("动态引入import\n以往资源的引入在代码编写前一般都要准备好，同时受网速等限制，静态引入资源可能会导致页面卡住，这时就需要动态引入。\n"),a("code",[t._v("import(\"./hello.js ' ).then( module => { .... });")])]),t._v(" "),a("li",[t._v("bigInt：\n大整形，适用于更大数字运算"),a("br"),t._v(" "),a("code",[t._v("let m = BigInt(15) // (必须是整形)")]),t._v(" "),a("code",[t._v("let n = 521n;")])]),t._v(" "),a("li",[t._v("globalthis\n这是一个始终指向全局对象的对象")])])])}),[],!1,null,null,null);s.default=r.exports}}]);