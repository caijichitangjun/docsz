(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{605:function(s,t,a){s.exports=a.p+"assets/img/Lvariable.2810d0ee.png"},606:function(s,t,a){s.exports=a.p+"assets/img/Lvariable2.64a913d4.png"},607:function(s,t,a){s.exports=a.p+"assets/img/Lnesting.72e00f54.png"},608:function(s,t,a){s.exports=a.p+"assets/img/Lhoverother.0ef925cb.png"},609:function(s,t,a){s.exports=a.p+"assets/img/Lmixin.5c082632.png"},610:function(s,t,a){s.exports=a.p+"assets/img/Lextend.3ce8f63f.png"},661:function(s,t,a){"use strict";a.r(t);var e=a(5),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"什么是-css-预处器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-css-预处器"}},[s._v("#")]),s._v(" 什么是 CSS 预处器")]),s._v(" "),e("p",[s._v("       通俗的说，CSS预处理器用一种专门的编程语言，进行Web页面样式设计，然后再编译成正常的CSS文件，以供项目使用。CSS 预处理器为CSS增加一些编程的特性，可以在CSS中使用变量、简单的逻辑程序、函数等等在编程语言中的一些基本特性，可以让CSS更加简洁、适应性更强、可读性更佳，易于维护等诸多好处。")]),s._v(" "),e("h3",{attrs:{id:"背景介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#背景介绍"}},[s._v("#")]),s._v(" 背景介绍")]),s._v(" "),e("p",[s._v("       LESS由Alexis Sellier于2009年设计。LESS是一个开源。LESS的第一个版本是用Ruby编写的，在后来的版本中，它被JavaScript代替，在一定程度上也促进了sass的进化，但由于程序员习惯或其它原因，使用率上不及sass。")]),s._v(" "),e("h2",{attrs:{id:"sass-css"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sass-css"}},[s._v("#")]),s._v(" sass => css")]),s._v(" "),e("p",[s._v("       安装less处理工具在vue项目中，使用"),e("code",[s._v("npm install -g less")]),s._v("安装即可，在客户端下可以使用编译工具"),e("a",{attrs:{href:"http://koala-app.com/index-zh.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("koala"),e("OutboundLink")],1),s._v("。"),e("br"),s._v("\n       在B站上有很多的less预处理器的教程，这里推荐的是较为简洁的，"),e("a",{attrs:{href:"https://www.bilibili.com/video/BV1YW411T7vd?spm_id_from=333.999.0.0",target:"_blank",rel:"noopener noreferrer"}},[s._v("尚硅谷前端less教程"),e("OutboundLink")],1),s._v("。")]),s._v(" "),e("h3",{attrs:{id:"避免编译"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#避免编译"}},[s._v("#")]),s._v(" 避免编译")]),s._v(" "),e("p",[s._v("       有时候，对于一些特殊的代码，我们不希望由less转为css过程中，处理器帮我们处理，希望它展示以前的样子。\n"),e("code",[s._v('~"不希望被编译的内容"')])]),s._v(" "),e("h3",{attrs:{id:"项目准备"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目准备"}},[s._v("#")]),s._v(" 项目准备")]),s._v(" "),e("p",[s._v("       需要准备两个文件夹分别保存处理前的"),e("code",[s._v(".less")]),s._v("文件和处理后的"),e("code",[s._v(".css")]),s._v("文件。")]),s._v(" "),e("div",{staticClass:"language-less extra-class"},[e("pre",{pre:!0,attrs:{class:"language-less"}},[e("code",[s._v("less"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 该目录存储scss文件")]),s._v("\ncss"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 该目录存储css文件")]),s._v("\n")])])]),e("h2",{attrs:{id:"less语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#less语法"}},[s._v("#")]),s._v(" less语法")]),s._v(" "),e("h3",{attrs:{id:"less变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#less变量"}},[s._v("#")]),s._v(" less变量")]),s._v(" "),e("p",[s._v("       less可以定义一个变量，定义方式为"),e("code",[s._v("@name = value")]),s._v("，作为变量，其作用的范围受作用域限制。"),e("br"),s._v(" "),e("img",{attrs:{src:a(605),alt:"定义变量"}}),e("br"),s._v("\n       当然变量不会局限于定义value值，也可以定义key、选择器等。使用是需要"),e("code",[s._v("@{variable}")]),s._v("，这种写法虽然被允许但不推荐。"),e("br"),s._v(" "),e("img",{attrs:{src:a(606),alt:"定义变量"}})]),s._v(" "),e("p",[e("span",{staticStyle:{color:"red"}},[s._v("       less有一个特殊的点。变量的延迟加载：会等某个作用域的所有变量都声明完成后才会去赋值。")])]),s._v(" "),e("h3",{attrs:{id:"less嵌套语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#less嵌套语法"}},[s._v("#")]),s._v(" less嵌套语法")]),s._v(" "),e("p",[s._v("       在css文件中，对于一个嵌套层级较深的层级来说，要拿到内层的元素需要一层一层的取，当内层元素较多时，定位标签时，往往编写了大量的重复代码，费时费力且不易维护。"),e("br"),s._v("\n       在less中，编写代码可以嵌套这些，就像是在html的层级一样，方便后期维护。")]),s._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[s._v("html:\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("div")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("class")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("ul")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("li")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("li")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("li")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("li")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("ul")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("a")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("href")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("a")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("p")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("class")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("name-p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("p")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])])]),e("p",[e("span",{staticStyle:{color:"red"}},[s._v("       在本文出现的实例代码毫无逻辑可言，也是可能是不推荐的写法，在本文中的作用仅是示例而已。")])]),s._v(" "),e("p",[e("img",{attrs:{src:a(607),alt:"嵌套属性示例"}})]),s._v(" "),e("p",[s._v("       在sass中，当需要编写"),e("code",[s._v("：hover")]),s._v("、"),e("code",[s._v(":focus")]),s._v("等选择器时，需要添加连接符"),e("code",[s._v("&")]),s._v("。")]),s._v(" "),e("p",[e("img",{attrs:{src:a(608),alt:"事件选择器嵌套"}})]),s._v(" "),e("h3",{attrs:{id:"属性复用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#属性复用"}},[s._v("#")]),s._v(" 属性复用")]),s._v(" "),e("h4",{attrs:{id:"混合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#混合"}},[s._v("#")]),s._v(" 混合")]),s._v(" "),e("p",[s._v("       类似于sass中的混合mixin，不过定义的方法不同，而且其相当于一个"),e("code",[s._v("类选择器")]),s._v("。当混合被调用时，混合会将自身的属性全部放入引用的位置。")]),s._v(" "),e("div",{staticClass:"language-less extra-class"},[e("pre",{pre:!0,attrs:{class:"language-less"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 定义")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".mixinName(vlaue1,value2,...)")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在下图中，我们会给一个示例供大家理解。")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),e("p",[e("img",{attrs:{src:a(609),alt:"混合"}}),e("br"),s._v(" "),e("span",{staticStyle:{color:"red"}},[s._v("       在此处还有个需要注意的地方：当我们定义的混合没有参数时，我们可以选择不写"),e("code",[s._v("()")]),s._v("，但此时该混合也会被当做类选择器，从而被编译到"),e("code",[s._v(".css")]),s._v("文件中，但它却并不是我们希望的。")]),e("br"),s._v(" "),e("span",{staticStyle:{color:"red"}},[s._v("              1. 定义引用混合时是可以传递参数的。如果定义了初始值，在没有传值的情况下会使用初始定义的值。")]),e("br"),s._v(" "),e("span",{staticStyle:{color:"red"}},[s._v("              2. 引用时传递的参数应按照定义时的顺序。")]),e("br"),s._v(" "),e("span",{staticStyle:{color:"red"}},[s._v("              3. 如果指定了参数的值，如图中所示，则也可以不按顺序。")])]),s._v(" "),e("h4",{attrs:{id:"extend继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#extend继承"}},[s._v("#")]),s._v(" extend继承")]),s._v(" "),e("p",[s._v("       当两个类的内容大致一致时，我们当然可以把公共部分抽离出去定义为一个"),e("code",[s._v("混合")]),s._v("来减少代码编写，在这里我们介绍的是继承。"),e("br"),s._v("\n       继承，简单来说就是继承者将获得被继承着的一切，当然被继承着所拥有的内容也不会被删除。"),e("br"),s._v(" "),e("img",{attrs:{src:a(610),alt:"mixin混合"}})]),s._v(" "),e("h3",{attrs:{id:"注释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[s._v("#")]),s._v(" 注释")]),s._v(" "),e("p",[s._v("       less为我们提供了两种种注释的写法，如下：")]),s._v(" "),e("div",{staticClass:"language-less extra-class"},[e("pre",{pre:!0,attrs:{class:"language-less"}},[e("code",[s._v("1. 双斜线的单行注释：\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 我是单行注释")]),s._v("\n2. 斜线加星号的多行注释\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n    这里是多行注释\n    这里的注释内容即使经历编译也会以多行注释的形式展示在编译后的css文件中，\n  */")]),s._v("\n")])])]),e("h3",{attrs:{id:"变量及方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量及方法"}},[s._v("#")]),s._v(" 变量及方法")]),s._v(" "),e("p",[s._v("       因为平时使用less真不多，当初学习时，老师也没有整理less中声明变量的类型和方法，因此对其了解不多，还请见谅。")])])}),[],!1,null,null,null);t.default=n.exports}}]);